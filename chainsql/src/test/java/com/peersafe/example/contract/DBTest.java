package com.peersafe.example.contract;

import com.peersafe.abi.TypeReference;
import com.peersafe.abi.datatypes.Function;
import com.peersafe.abi.datatypes.Type;
import com.peersafe.abi.datatypes.Utf8String;
import com.peersafe.base.client.pubsub.Publisher;
import com.peersafe.chainsql.contract.Contract;
import com.peersafe.chainsql.contract.exception.ContractCallException;
import com.peersafe.chainsql.contract.exception.TransactionException;
import com.peersafe.chainsql.core.Chainsql;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the com.peersafe.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class DBTest extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_DROP = "drop";

    public static final String FUNC_DELETEX = "deletex";

    public static final String FUNC_GRANT = "grant";

    public static final String FUNC_SQLTRANSACTION = "sqlTransaction";

    public static final String FUNC_GET = "get";

    public static final String FUNC_RENAME = "rename";

    protected DBTest(Chainsql chainsql, String contractAddress, BigInteger gasLimit) {
        super(chainsql,BINARY, contractAddress, gasLimit);
    }

    public Contract insert(String tableName, String raw) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract create(String tableName, String raw) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract update(String owner, String tableName, String rawUpdate, String rawGet) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(rawUpdate), 
                new com.peersafe.abi.datatypes.Utf8String(rawGet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract update(String tableName, String rawUpdate, String rawGet) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(rawUpdate), 
                new com.peersafe.abi.datatypes.Utf8String(rawGet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract drop(String tableName) {
        final Function function = new Function(
                FUNC_DROP, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract insert(String owner, String tableName, String raw) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract deletex(String owner, String tableName, String raw) {
        final Function function = new Function(
                FUNC_DELETEX, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract grant(String toWho, String tableName, String raw) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(toWho), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public Contract sqlTransaction(String tableName) {
        final Function function = new Function(
                FUNC_SQLTRANSACTION, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String get(String owner, String tableName, String raw) throws ContractCallException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public void get(String owner, String tableName, String raw, Publisher.Callback<String> cb) throws ContractCallException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        executeCallSingleValueReturn(function, String.class,new Publisher.Callback<String>() {
            @Override
            public void called(String args) {
                cb.called(args);
            }
        });
    }

    public Contract rename(String tableName, String tableNameNew) {
        final Function function = new Function(
                FUNC_RENAME, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(tableNameNew)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String get(String owner, String tableName, String raw, String field) throws ContractCallException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw), 
                new com.peersafe.abi.datatypes.Utf8String(field)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public void get(String owner, String tableName, String raw, String field, Publisher.Callback<String> cb) throws ContractCallException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Address(owner), 
                new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw), 
                new com.peersafe.abi.datatypes.Utf8String(field)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        executeCallSingleValueReturn(function, String.class,new Publisher.Callback<String>() {
            @Override
            public void called(String args) {
                cb.called(args);
            }
        });
    }

    public Contract deletex(String tableName, String raw) {
        final Function function = new Function(
                FUNC_DELETEX, 
                Arrays.<Type>asList(new com.peersafe.abi.datatypes.Utf8String(tableName), 
                new com.peersafe.abi.datatypes.Utf8String(raw)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static DBTest deploy(Chainsql chainsql, BigInteger gasLimit) throws TransactionException {
        return deployRemoteCall(DBTest.class, chainsql, gasLimit, BINARY, "");
    }

    public static void deploy(Chainsql chainsql, BigInteger gasLimit, Publisher.Callback<DBTest> cb) throws TransactionException {
        deployRemoteCall(DBTest.class, chainsql, gasLimit, BINARY, "", cb);
    }

    public static DBTest load(Chainsql chainsql, String contractAddress, BigInteger gasLimit) {
        return new DBTest(chainsql,contractAddress, gasLimit);
    }
}
